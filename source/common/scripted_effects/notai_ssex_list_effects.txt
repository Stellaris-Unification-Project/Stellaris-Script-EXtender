
 #####                     #####
##### Script Extender Lists #####
 #####                     #####
 # All list effects should be assumed to take 2 effect calls on the effect call stack
 # Lists are used to store clusters of related data(relation determined by user)
 # Lists are also used to organise and sift through that data in easily accessible ways

### Creates a new list to the database
### Requires to be in the scope of a database(use ssex_get_database to get the database reference)
### Parameters
# identifier - A database unique identifier for the list
# overwrite(optional) - Determines whether to delete any existing list with the same identifier, default value is no
### Access return value by scope - event_target:ssex_return_value
ssex_create_list = {
	if = {
		limit = { ssex_is_database = yes }
		save_global_event_target_as = ssex_hidden_scoped_list_database
	}
	else = {
		ssex_clear_return_value = yes
		ssex_get_database = { bound_to = this }
		if = {
			limit = { exists = event_target:ssex_return_value }
			event_target:ssex_return_value = { save_global_event_target_as = ssex_hidden_scoped_list_database }
			ssex_clear_return_value = yes
		}
		else = {
			ssex_create_database = { bound_to = this }
			event_target:ssex_return_value = { save_global_event_target_as = ssex_hidden_scoped_list_database }
			ssex_clear_return_value = yes
		}
	}
	event_target:ssex_hidden_scoped_list_database = {
		random_owned_leader = {
			limit = {
				ssex_is_list_header = yes
				has_leader_flag = $identifier$
			}
			if = {
				limit = { always = $overwrite|no$ }
				prev = {
					every_owned_leader = {
						limit = {
							ssex_is_list_item = yes
							has_leader_flag = ssex_list_item_of_@prevprev
						}
						prev = { ssex_decrement = { variable = ssex_database_entry_count } }
						kill_leader = {
							fire = yes
							show_notification = no
						}
					}
					ssex_decrement = { variable = ssex_database_entry_count }
				}
				kill_leader = {
					fire = yes
					show_notification = no
				}
			}
			else = { ssex_set_return_value = yes }
		}
		if = { 
			limit = { NOT = { exists = event_target:ssex_return_value } }
			create_leader = {
				name = ssex_list_name
				class = governor
				species = event_target:ssex_database_entry_species
				immortal = yes
				effect = {
					set_leader_flag = ssex_list_header
					set_leader_flag = $identifier$
					set_variable = {
						which = ssex_list_item_count
						value = 0
					}
					ssex_set_return_value = yes
				}
			}
			create_leader = {
				name = ssex_list_enumerator_name
				class = governor
				species = event_target:ssex_database_entry_species
				immortal = yes
				effect = {
					set_leader_flag = ssex_database_list_enumerator
					set_leader_flag = ssex_enumerator_$identifier$
					set_leader_flag = ssex_enumerator_of_@event_target:ssex_return_value
					set_variable = {
						which = ssex_current_index
						value = 0
					}
				}
			}
		}
	}
	clear_global_event_target = ssex_hidden_scoped_list_database
}

### Deletes a list
### Parameters
# identifier - A database unique identifier for the list
# delete(optional) - Determines if the list items should be deleted or converted to database entries, default value is yes
ssex_delete_list = {
	ssex_clear_return_value = yes
	if = {
		limit = { ssex_is_database = yes }
		save_global_event_target_as = ssex_hidden_scoped_list_database
	}
	else = {
		ssex_get_database = { bound_to = this }
		if = {
			limit = { exists = event_target:ssex_return_value }
			event_target:ssex_return_value = { save_global_event_target_as = ssex_hidden_scoped_list_database }
			ssex_clear_return_value = yes
		}
	}
	if = {
		limit = { exists = event_target:ssex_hidden_scoped_list_database }
		event_target:ssex_hidden_scoped_list_database = {
			random_owned_leader = {
				limit = {
					ssex_is_list_header = yes
					has_leader_flag = $identifier$
				}
				save_global_event_target_as = ssex_hidden_current_scope_list
				owner = { ssex_decrement = { variable = ssex_database_entry_count } }
				kill_leader = {
					fire = yes
					show_notification = no
				}
			}
			if = {
				limit = { exists = event_target:ssex_hidden_current_scope_list }
				random_owned_leader = {
					limit = {
						ssex_is_list_enumerator = yes
						has_leader_flag = ssex_enumerator_of_@event_target:ssex_hidden_current_scope_list
					}
					owner = { ssex_decrement = { variable = ssex_database_entry_count } }
					kill_leader = {
						fire = yes
						show_notification = no
					}
				}
				every_owned_leader = {
					limit = {
						ssex_is_list_item = yes
						has_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_current_scope_list
					}
					if = {
						limit = { always = $delete|yes$ }
						owner = { ssex_decrement = { variable = ssex_database_entry_count } }
						kill_leader = {
							fire = yes
							show_notification = no
						}
					}
					else = { ssex_internal_convert_list_to_entry = yes }
				}
				clear_global_event_target = ssex_hidden_current_scope_list
			}
		}
		clear_global_event_target = ssex_hidden_scoped_list_database
	}
	else = { log_error = "Error in ssex_delete_list: Scope this is not a database and does not have an obviously accessable database" }
}

### Retrieves a list header for metadata
### Parameters
# identifier - A database unique identifier for the list
### Access return value by scope - event_target:ssex_return_value
ssex_get_list_header = {
	if = {
		limit = { ssex_is_database = yes }
		save_global_event_target_as = ssex_hidden_scoped_list_database
	}
	else = {
		ssex_get_database = { bound_to = this }
		if = {
			limit = { exists = event_target:ssex_return_value }
			event_target:ssex_return_value = { save_global_event_target_as = ssex_hidden_scoped_list_database }
			ssex_clear_return_value = yes
		}
		else = {
			log_error = "ssex_get_list: Scope this is not a database and does not have an obviously accessable database."
			break = yes
		}
	}
	event_target:ssex_hidden_scoped_list_database = {
		random_owned_leader = {
			limit = {
				ssex_is_list_header = yes
				has_leader_flag = $identifier$
			}
			ssex_set_return_value = yes
		}
	}
	clear_global_event_target = ssex_hidden_scoped_list_database
}

### Creates and adds a list entry to a database
### Parameters
# identifier - A database unique identifier for the list
# index(optional) - The index for where to add the given list entry on the list, default value is count - 1
### Access return value by scope - event_target:ssex_return_value
ssex_create_list_entry = {
	[[index]
	set_variable = {
		which = ssex_list_append_index
		value = $index$
	}
	]
	if = {
		limit = { ssex_is_database = yes }
		save_global_event_target_as = ssex_hidden_scoped_list_database
	}
	else = {
		ssex_clear_return_value = yes
		ssex_get_database = { bound_to = this }
		if = {
			limit = { exists = event_target:ssex_return_value }
			event_target:ssex_return_value = { save_global_event_target_as = ssex_hidden_scoped_list_database }
			ssex_clear_return_value = yes
		}
	}
	if = {
		limit = { exists = event_target:ssex_hidden_scoped_list_database }
		event_target:ssex_hidden_scoped_list_database = {
			[[index]
			set_variable = {
				which = ssex_list_append_index
				value = prev.ssex_list_append_index
			}
			]
			random_owned_leader = {
				limit = {
					ssex_is_list_header = yes
					has_leader_flag = $identifier$
				}
				save_global_event_target_as = ssex_hidden_list_header_object
			}
			if = {
				limit = { exists = event_target:ssex_hidden_list_header_object }
				[[index]
				every_owned_leader = {
					limit = {
						ssex_is_list_item = yes
						has_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_list_header_object
						check_variable = {
							which = ssex_list_index
							value = {
								scope = prev
								variable >= ssex_list_append_index 
							}
						}
					}
					change_variable = {
						which = ssex_list_index
						value = 1
					}
				}
				]
				create_leader = {
					name = ssex_database_entry_name
					class = governor
					species = event_target:ssex_database_entry_species
					immortal = yes
					effect = {
						set_leader_flag = ssex_item_in_list
						set_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_list_header_object
						set_variable = {
							which = ssex_list_index
							value = { scope = event_target:ssex_hidden_list_header_object variable = ssex_list_item_count }
						}
						[[index]
						set_variable = {
							which = ssex_list_index
							value = { scope = prev variable = ssex_list_append_index }
						}
						]
						event_target:ssex_hidden_list_header_object = {
							change_variable = {
								which = ssex_list_item_count
								value = 1
							}
						}
						ssex_set_return_value = yes
					}
				}
				clear_global_event_target = ssex_hidden_list_header_object			
			}
			else = { log_error = "ssex_create_list_entry: No list with the given identifier exists" }
			[[index]clear_variable = ssex_list_append_index ]
		}
		clear_global_event_target = ssex_hidden_scoped_list_database
	}
	else = { log_error = "ssex_create_list_entry: Scope this is not a database and does not have an obviously accessable database" }
	[[index]clear_variable = ssex_list_append_index ]
}

### Creates and adds a list entry to a database
### Parameters
# identifier - The database unique identifier of the list
# index - The index of the entry in the list
# delete(optional) - Whether to completely delete the item in question or just remove it from the given list, default value is no
ssex_remove_list_entry = {
	ssex_clear_return_value = yes
	if = {
		limit = { ssex_is_database = yes }
		save_global_event_target_as = ssex_hidden_scoped_list_database
	}
	else = {
		ssex_get_database = { bound_to = this }
		if = {
			limit = { exists = event_target:ssex_return_value }
			event_target:ssex_return_value = { save_global_event_target_as = ssex_hidden_scoped_list_database }
			ssex_clear_return_value = yes
		}
	}
	set_variable = {
		which = ssex_hidden_remove_index
		value = $index$
	}
	if = {
		limit = { exists = event_target:ssex_hidden_scoped_list_database }
		event_target:ssex_hidden_scoped_list_database = {
			log_error = "ssex_remove_list_entry: ssex_hidden_scoped_list_database = \\[This.GetScopeType]"
			random_owned_leader = {
				limit = {
					ssex_is_database_entry = yes
					has_leader_flag = ssex_list_header
					has_leader_flag = $identifier$
				}
				save_global_event_target_as = ssex_hidden_list_header_object
			}
			if = {
				limit = { exists = event_target:ssex_hidden_list_header_object }
				random_owned_leader = {
					limit = {
						ssex_is_database_entry = yes
						has_leader_flag = ssex_item_in_list
						has_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_list_header_object
						check_variable = {
							which = ssex_list_index
							value = {
								scope = prev.prev
								variable = ssex_hidden_remove_index
							}
						}
					}
					if = {
						limit = { always = $delete|no$ }
						owner = { ssex_decrement = { variable = ssex_database_entry_count } }
						kill_leader = {
							fire = yes
							show_notification = no
						}
					}
					else = { ssex_internal_convert_list_to_entry = yes }
					event_target:ssex_hidden_list_header_object = {
						subtract_variable = {
							which = ssex_list_item_count
							value = 1
						}
						ssex_internal_reindex_list = yes
					}
				}
				clear_global_event_target = ssex_hidden_list_header_object
			}
		}
		clear_global_event_target = ssex_hidden_scoped_list_database
	}
	else = { log_error = "ssex_remove_list_entry: Scope this is not a database and does not have an obviously accessable database" }
	clear_variable = ssex_hidden_remove_index
}

### Adds a given entry to a list
### Requires to be in the scope of a database entry(use ssex_get_database_entry to get the reference)
### Parameters
# identifier - A database unique identifier of the list
# index(optional) - The index for where to add the given list entry on the list, default value is count - 1
ssex_add_entry_to_list = {
	[[index]
	set_variable = {
		which = ssex_append_index
		value = $index$
	}
	]
	if = {
		limit = { ssex_is_database_entry = yes }
		owner = {
			random_owned_leader ={
				limit = {
					ssex_is_list_header = yes
					has_leader_flag = $identifier$
				}
				save_global_event_target_as = ssex_hidden_list_header_object
			}
		}
		if = {
			limit = { ssex_is_list_item = yes }
			log_error = "ssex_add_to_list: Database entry already belongs to a list, it cannot belong to multiple at once"
		}
		elssex_if = {
			limit = { exists = event_target:ssex_hidden_list_header_object }
			[[index]
			owner = {
				every_owned_leader = {
					limit = {
						ssex_is_list_item = yes
						has_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_list_header_object
						check_variable = {
							which = ssex_list_index
							value = {
								scope = prevprev
								variable >= ssex_append_index
							}
						}
					}
					change_variable = {
						which = ssex_list_index
						value = 1
					}
				}
			}
			set_variable = {
				which = ssex_list_index
				value = ssex_append_index
			}
			]
			ssex_internal_convert_entry_to_list = yes
			clear_global_event_target = ssex_hidden_list_header_object
		}
		else = { log_error = "ssex_add_to_list: No list with given identifier exists" }
	}
	else = { log_error = "ssex_add_to_list: Calling scope is not a validentifier database entry" }
}

### Removes a given database entry from a list
### Requires to be in the scope of a database entry(use ssex_get_database_entry or ssex_get_list_entry to get the reference)
### Parameters
# identifier - A database unique identifier for the list
# delete(optional) - Whether the database item should be deleted or just removed from the list, default value is yes
# new_identifier(optional) - A database unique identifier for the entry if removed
ssex_remove_entry_from_list = {
	if = {
		limit = { ssex_is_list_item = yes }
		owner = {
			random_owned_leader = {
				limit = {
					ssex_is_list_header = yes
					has_leader_flag = $identifier$
				}
				save_global_event_target_as = ssex_hidden_list_header_object
			}
		}
		if = {
			limit = { exists = event_target:ssex_hidden_list_header_object }
			if = {
				limit = { always = $delete|yes$ }
				owner = {
					subtract_variable = {
						which = ssex_database_entry_count
						value = 1
					}
				}
				kill_leader = {
					fire = yes
					show_notification = no
				}
			}
			else = {
				ssex_internal_convert_list_to_entry = yes
				[[new_identifier]
					set_leader_flag = $new_identifier$
					set_name = $new_identifier$
				]
			}
			event_target:ssex_hidden_list_header_object = {
				subtract_variable = {
					which = ssex_list_item_count
					value = 1
				}
				ssex_internal_reindex_list = yes
			}
			clear_global_event_target = ssex_hidden_list_header_object
		}
		else = { log_error = "ssex_remove_from_list: No list with the given identifier exists" }
	}
	else = { log_error = "ssex_remove_from_list: Calling scope is not a validentifier list item" }
}

### Retrieves a list entry from a list
### Parameters
# identifier - The database unique identifier of the list
# index(optional) - The index of the list item
# limiter(optional) - A simple scripted_trigger accepting yes or no values(example: my_trigger = yes), effect will input yes for this trigger
# first(optional) - Exclusive with Last, if limiter parameter is filled will take the first item found
# last(optional) - Exclusive with first, if limiter parameter is filled will take the last item found
### If neither first or last are specified the effect will select a random value
### Access return value by scope - event_target:ssex_return_value
ssex_get_list_entry = {
	[[index]
	set_variable = {
		which = ssex_select_index
		value = $index$
	}
	]
	if = {
		limit = {
			always = $first|no$
			always = $last|no$
		}
		log_error = "ssex_get_list_entry: Cannot select both parameters first and last"
		break = yes
	}
	elssex_if = {
		limit = {
			[[index]always = yes]
			OR = {
				always = $first|no$
				always = $last|no$
			}
		}
		log_error = "ssex_get_list_entry: Cannot select both parameters first or last with parameter index"
		break = yes
	}
	else = {
		ssex_clear_return_value = yes
		if = {
			limit = { ssex_is_database = yes }
			save_global_event_target_as = ssex_hidden_scoped_list_database
		}
		else = {
			ssex_get_database = { bound_to = this }
			if = {
				limit = { exists = event_target:ssex_return_value }
				event_target:ssex_return_value = { save_global_event_target_as = ssex_hidden_scoped_list_database }
				ssex_clear_return_value = yes
			}
		}
		if = {
			limit = { exists = event_target:ssex_hidden_scoped_list_database }
			event_target:ssex_hidden_scoped_list_database = {
				random_owned_leader = {
					limit = {
						ssex_is_list_header = yes
						has_leader_flag = $identifier$
					}
					save_global_event_target_as = ssex_hidden_list_header_object
				}
				if = {
					limit = { exists = event_target:ssex_hidden_list_header_object }
					if = {
						limit = {
							OR = {
								always = $first|no$
								always = $last|no$
							}
						}
						every_owned_leader = {
							limit = {
								ssex_is_list_item = yes
								has_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_list_header_object
								[[limiter]$limiter$ = yes]
							}
							if = {
								limit = {
									always = $first|no$
									NOT = { exists = event_target:ssex_return_value }
								}
								ssex_set_return_value = yes
							}
							elssex_if = {
								limit = { always = $last|no$ }
								ssex_set_return_value = yes
							}
						}
					}
					else = {
						random_owned_leader = {
							limit = {
								ssex_is_list_item = yes
								has_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_list_header_object
								[[index]
									check_variable = {
										which = ssex_list_index
										value = { scope = prev.prev variable = ssex_select_index }
									}
								]
								[[limiter]$limiter$ = yes]
							}
							ssex_set_return_value = yes
						}
					}
					clear_global_event_target = ssex_hidden_list_header_object
				}
			}
			clear_global_event_target = ssex_hidden_scoped_list_database
		}
		else = { log_error = "ssex_get_list_entry: Scope this is not a database and does not have an obviously accessable database." }
	}
}

### Internal use, do not use outside of code within this mod
ssex_internal_reindex_list = {
	event_target:ssex_event_country = {
		set_variable = {
			which = ssex_current_index_value
			value = 0
		}
		set_variable = {
			which = ssex_new_index_value
			value = 0
		}
	}
	owner = {
		every_owned_leader = {
			limit = {
				is_scope_type = leader
				exists = owner
				has_leader_flag = ssex_database_entry
				has_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_list_header_object
			}
			prev = {
				random_owned_leader = {
					limit = {
						is_scope_type = leader
						exists = owner
						owner = { is_scope_type = country }
						has_leader_flag = ssex_database_entry
						has_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_list_header_object
						check_variable = {
							which = ssex_list_index
							value = { scope = event_target:ssex_event_country variable = ssex_current_index_value }
						}
					}
					save_global_event_target_as = ssex_hidden_selected_list_item
				}
			}
			if = {
				limit = {
					exists = event_target:ssex_hidden_selected_list_item
					event_target:ssex_hidden_selected_list_item = {
						check_variable = {
							which = ssex_list_index
							value = { scope = event_target:ssex_event_country variable = ssex_new_index_value }
						}
					}
				}
				event_target:ssex_event_country = {
					change_variable = {
						which = ssex_new_index_value
						value = 1
					}
				}
			}
			elssex_if = {
				limit = { exists = event_target:ssex_hidden_selected_list_item }
				event_target:ssex_hidden_selected_list_item = {
					set_variable = {
						which = ssex_list_index
						value = { scope = event_target:ssex_event_country variable = ssex_new_index_value }
					}
				}
				event_target:ssex_event_country = {
					change_variable = {
						which = ssex_new_index_value
						value = 1
					}
				}
			}
			clear_global_event_target = ssex_hidden_selected_list_item
			event_target:ssex_event_country = {
				change_variable = {
					which = ssex_new_index_value
					value = 1
				}
			}
		}
		event_target:ssex_event_country = {
			clear_variable = ssex_current_index_value
			clear_variable = ssex_new_index_value
		}
	}
}
### Internal use, do not use outside of code within this mod
ssex_internal_convert_list_to_entry = {
	set_leader_flag = ssex_database_entry
	remove_leader_flag = ssex_item_in_list
	remove_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_current_scope_list
	owner = { 
		change_variable = {
			which = ssex_database_entry_count
			value = 1
		}
	}
	clear_variable = ssex_list_index
}
### Internal use, do not use outside of code within this mod
ssex_internal_convert_entry_to_list = {
	set_leader_flag = ssex_item_in_list
	set_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_list_header_object
	remove_leader_flag = ssex_database_entry
	owner = { 
		subtract_variable = {
			which = ssex_database_entry_count 
			value = 1
		}
	}
	if = {
		limit = { NOT = { is_variable_set = ssex_list_index } }
		set_variable = {
			which = ssex_list_index
			value = { scope = event_target:ssex_hidden_list_header_object variable = ssex_list_item_count }
		}
	}
	event_target:ssex_hidden_list_header_object = {
		change_variable = {
			which = ssex_list_item_count 
			value = 1
	 	}
	}
}

### Creates a list enumerator for a given list
### Parameters
# identifier - The lists identifier
### Access return value by scope - event_target:ssex_return_value
ssex_get_enumerator = {
	ssex_clear_return_value = yes
	if = {
		limit = { ssex_is_database = yes }
		save_global_event_target_as = ssex_hidden_scoped_list_database
	}
	else = {
		ssex_get_database = { bound_to = this }
		if = {
			limit = { exists = event_target:ssex_return_value }
			event_target:ssex_return_value = { save_global_event_target_as = ssex_hidden_scoped_list_database }
			ssex_clear_return_value = yes
		}
	}
	if = {
		limit = { exists = event_target:ssex_hidden_scoped_list_database }
		event_target:ssex_hidden_scoped_list_database = {
			random_owned_leader = {
				limit = {
					ssex_is_list_header = yes
					has_leader_flag = $identifier$
				}
				save_global_event_target_as = ssex_hidden_current_scope_list
			}
			if = {
				limit = { exists = event_target:ssex_hidden_current_scope_list }
				random_owned_leader = {
					limit = {
						ssex_is_list_enumerator = yes
						has_leader_flag = ssex_enumerator_of_@event_target:ssex_hidden_current_scope_list
					}
					ssex_set_return_value = yes
				}
			}
			else = { log_error = "ssex_get_enumerator: No list with the given identifier exists" }
		}
		clear_global_event_target = ssex_hidden_scoped_list_database
	}
	else = { log_error = "ssex_get_enumerator: Scope this is not a database and does not have an obviously accessable database." }
}

### Iterates and returns to the next entry on a list
### Requires to be in the scope of an enumerator(use ssex_get_enumerator to get the enumerator reference)
### Access list value by scope - event_target:ssex_return_value
ssex_enumerator_move_next = {
	if = {
		limit = { ssex_is_list_enumerator = yes }
		change_variable = {
			which = ssex_current_index
			value = 1
		}
		ssex_enumerator_return_current = yes
	}
	else = { log_error = "ssex_move_next_item: The provided scope is not a validentifier list enumerator" }
}

### Iterates and returns to the previous entry on a list
### Requires to be in the scope of an enumerator(use ssex_get_enumerator to get the enumerator reference)
### Access list value by scope - event_target:ssex_return_value
ssex_enumerator_move_previous = {
	if = {
		limit = { ssex_is_list_enumerator = yes }
		subtract_variable = {
			which = ssex_current_index
			value = 1
		}
		ssex_enumerator_return_current = yes
	}
	else = { log_error = "ssex_move_next_item: The provided scope is not a validentifier list enumerator" }
}

### Returns the current list entry the enumerator is iterating on of the given list
### Requires to be in the scope of an enumerator(use ssex_get_enumerator to get the enumerator reference)
### Access list value by scope - event_target:ssex_return_value
ssex_enumerator_return_current = {
	ssex_clear_return_value = yes
	if = {
		limit = { ssex_is_list_enumerator = yes }
		if = {
			limit = {
				NAND = {
					exists = event_target:ssex_hidden_current_scope_list
					has_leader_flag = ssex_points_to_list_@event_target:ssex_hidden_current_scope_list
				}
			}
			if = {
				limit = { exists = event_target:ssex_hidden_current_scope_list }
				clear_global_event_target = ssex_hidden_current_scope_list
			}
			owner = {
				random_owned_leader = {
					limit = {
						ssex_is_list_header = yes
						prevprev = { has_leader_flag = ssex_points_to_list_@prev }
					}
					save_global_event_target_as = ssex_hidden_current_scope_list
				}
			}
		}
		if = {
			limit = { exists = event_target:ssex_hidden_current_scope_list }
			owner = {
				random_owned_leader = {
					limit = {
						ssex_is_list_item = yes
						has_leader_flag = ssex_list_item_of_@event_target:ssex_hidden_current_scope_list
						check_variable = {
							which = ssex_list_index
							value = { scope = prev variable = ssex_current_index }
						}
					}
					ssex_set_return_value = yes
				}
			}
			if = {
				limit = { NOT = { exists = event_target:ssex_return_value } }
				log_error = "ssex_enumerator_return_current: The enumerators index is out of range"
			}
		}
		else = {
			owner = { ssex_decrement = { variable = ssex_database_entry_count } }
			kill_leader = {
				fire = yes
				show_notification = no
			}
			log_error = "ssex_enumerator_return_current: The current enumerator is old and points to a non existant list"
		}
	}
	else = { log_error = "ssex_enumerator_return_current: The provided scope is not a validentifier list enumerator" }
}

### Resets a list enumerator to the start of a list
### Requires to be in the scope of an enumerator(use ssex_get_enumerator to get the enumerator reference)
### Parameters
# index(optional) - The index to reset the enumerator to, default value is 0
### Access list value by scope - event_target:ssex_return_value
ssex_reset_enumerator = {
	if = {
		limit = { ssex_is_list_enumerator = yes }
		set_variable = {
			which = ssex_current_index
			value = $index|0$
		}
		ssex_set_return_value = yes
	}
	else = { log_error = "ssex_reset_enumerator: The provided scope is not a validentifier list enumerator" }
}

### TODO Sort functions
ssex_sort_list_by_trigger = {

}

ssex_sort_list_by_variable = {

}

### TODO Export every script list to list
ssex_capture_script_list = {

}

### Copies an existing list as a new identifier
### Parameters
# identifier 			- The database unique identifier of the existing list
# new_identifier		- The database unique identifier of the list copy
# count(optional)		- The number of items in the list to copy from the starting index, default value is list count - 1
# index(optional)		- The item to start the copy from, default value is 0
# overwrite(optional)	- Whether to overwrite an existing list if found
ssex_copy_list = {

}

### Copies an existing list to another database object
### Parameters
# identifier 			- The database unique identifier of the existing list
# new_identifier		- The database unique identifier of the list copy
# database				- The database scope or the owner of the database to transfer the list too
# count(optional)		- The number of items in the list to copy from the starting index, default value is list count - 1
# index(optional)		- The item to start the copy from, default value is 0
# overwrite(optional)	- Whether to overwrite an existing list if found
ssex_copy_list_to = {

}

### Sets the provided variable to the count of the list
### Parameters
# identifier			- The database unique identifier of the list
# variable				- The variable to push the count to, can be unset
ssex_export_list_count = {

}

### Moves a list and all of its entries to another database object
### Parameters
# identifier				- The database unique identifier of the existing list
# database					- The database scope or the owner of the database to transfer the list too
# overwrite(optional)		- Determines whether to delete any existing list in the transfer database, defaults to yes
# new_identifier(optional)	- If the overwrite parameter is set this is required, used to change the identifier of the list if it encounters an issue with the overwrite
ssex_move_list = {

}

### Creates a new list containing all the entries that validate the given trigger
### Parameter
# identifier				- The database unique identifier of the existing list
# new_identifier			- The identifier for the newly created list
# trigger					- The trigger to limit events on, the trigger inputed will differ the rules of sign and comparison
# sign						- The sign used to compare the trigger to a statement, correct values depends on the trigger
# comparison				- The comparison value, input depends on the given trigger
# inverted					- If yes will wrape the trigger statement in a NOT function
# overwrite(optional)		- Whether to overwrite an existing value
# new_identifier(optional)	- If the overwrite parameter is set this is required, used to change the identifier of the list if it encounters an issue with the overwrite
ssex_get_entries_where = {

}

### Creates a new list containing all the entries that validate the given trigger
### Parameter
# identifier				- The database unique identifier of the existing list
# new_identifier			- The identifier for the newly created list
# variable					- The variable located in each list being compared
# sign						- The sign used to compare the trigger to a statement can be =, !=, >, <, <=, or >=
# comparison				- The comparison value, input depends on the given trigger
# inverted					- If yes will wrape the trigger statement in a NOT function
# overwrite(optional)		- Whether to overwrite an existing value
# new_identifier(optional)	- If the overwrite parameter is set this is required, used to change the identifier of the list if it encounters an issue with the overwrite
ssex_get_entries_where_variable = {

}